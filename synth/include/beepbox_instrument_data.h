/*
Copyright 2025 pkhead

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
the Software, and to permit persons to whom the Software is furnished to do so,
subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

#ifndef _beepbox_instrument_data_h_
#define _beepbox_instrument_data_h_

#define BPBXSYN_SYNTH_MAX_VOICES 16

typedef enum {
    // basic params
    BPBXSYN_PARAM_FADE_IN,
    BPBXSYN_PARAM_FADE_OUT,

    // modulation params
    BPBXSYN_PARAM_MOD_X,
    BPBXSYN_PARAM_MOD_Y,

    // transition type params
    BPBXSYN_PARAM_ENABLE_TRANSITION_TYPE,
    BPBXSYN_PARAM_TRANSITION_TYPE,

    // chord type params
    BPBXSYN_PARAM_ENABLE_CHORD_TYPE,
    BPBXSYN_PARAM_CHORD_TYPE,
    BPBXSYN_PARAM_ARPEGGIO_SPEED,
    BPBXSYN_PARAM_FAST_TWO_NOTE_ARPEGGIO,
    BPBXSYN_PARAM_STRUM_SPEED,

    // pitch shift params
    BPBXSYN_PARAM_ENABLE_PITCH_SHIFT,
    BPBXSYN_PARAM_PITCH_SHIFT,

    // detune params
    BPBXSYN_PARAM_ENABLE_DETUNE,
    BPBXSYN_PARAM_DETUNE,

    // vibrato params
    BPBXSYN_PARAM_ENABLE_VIBRATO,
    BPBXSYN_PARAM_VIBRATO_PRESET,
    BPBXSYN_PARAM_VIBRATO_DEPTH,
    BPBXSYN_PARAM_VIBRATO_SPEED,
    BPBXSYN_PARAM_VIBRATO_DELAY,
    BPBXSYN_PARAM_VIBRATO_TYPE,

    // note filter params
    BPBXSYN_PARAM_ENABLE_NOTE_FILTER,
    BPBXSYN_PARAM_NOTE_FILTER_TYPE0,
    BPBXSYN_PARAM_NOTE_FILTER_FREQ0,
    BPBXSYN_PARAM_NOTE_FILTER_GAIN0,
    BPBXSYN_PARAM_NOTE_FILTER_TYPE1,
    BPBXSYN_PARAM_NOTE_FILTER_FREQ1,
    BPBXSYN_PARAM_NOTE_FILTER_GAIN1,
    BPBXSYN_PARAM_NOTE_FILTER_TYPE2,
    BPBXSYN_PARAM_NOTE_FILTER_FREQ2,
    BPBXSYN_PARAM_NOTE_FILTER_GAIN2,
    BPBXSYN_PARAM_NOTE_FILTER_TYPE3,
    BPBXSYN_PARAM_NOTE_FILTER_FREQ3,
    BPBXSYN_PARAM_NOTE_FILTER_GAIN3,
    BPBXSYN_PARAM_NOTE_FILTER_TYPE4,
    BPBXSYN_PARAM_NOTE_FILTER_FREQ4,
    BPBXSYN_PARAM_NOTE_FILTER_GAIN4,
    BPBXSYN_PARAM_NOTE_FILTER_TYPE5,
    BPBXSYN_PARAM_NOTE_FILTER_FREQ5,
    BPBXSYN_PARAM_NOTE_FILTER_GAIN5,
    BPBXSYN_PARAM_NOTE_FILTER_TYPE6,
    BPBXSYN_PARAM_NOTE_FILTER_FREQ6,
    BPBXSYN_PARAM_NOTE_FILTER_GAIN6,
    BPBXSYN_PARAM_NOTE_FILTER_TYPE7,
    BPBXSYN_PARAM_NOTE_FILTER_FREQ7,
    BPBXSYN_PARAM_NOTE_FILTER_GAIN7,

    BPBXSYN_BASE_PARAM_COUNT
} bpbxsyn_synth_param_e;

/////////////
// FM data //
/////////////
#define BPBXSYN_FM_PARAM_COUNT 11
#define BPBXSYN_FM_FREQ_COUNT 35
#define BPBXSYN_FM_ALGORITHM_COUNT 13
#define BPBXSYN_FM_FEEDBACK_TYPE_COUNT 18

typedef enum {
    BPBXSYN_FM_PARAM_ALGORITHM = BPBXSYN_BASE_PARAM_COUNT,
    BPBXSYN_FM_PARAM_FREQ1,
    BPBXSYN_FM_PARAM_VOLUME1,
    BPBXSYN_FM_PARAM_FREQ2,
    BPBXSYN_FM_PARAM_VOLUME2,
    BPBXSYN_FM_PARAM_FREQ3,
    BPBXSYN_FM_PARAM_VOLUME3,
    BPBXSYN_FM_PARAM_FREQ4,
    BPBXSYN_FM_PARAM_VOLUME4,
    BPBXSYN_FM_PARAM_FEEDBACK_TYPE,
    BPBXSYN_FM_PARAM_FEEDBACK_VOLUME,
} bpbxsyn_fm_param_e;

///////////////
// Chip data //
///////////////
#define BPBXSYN_CHIP_PARAM_COUNT 2

typedef enum {
    BPBXSYN_CHIP_PARAM_WAVEFORM = BPBXSYN_BASE_PARAM_COUNT,
    BPBXSYN_CHIP_PARAM_UNISON,
} bpbxsyn_chip_param_e;

//////////////////////
// Pulse Width data //
//////////////////////
#define BPBXSYN_PULSE_WIDTH_PARAM_COUNT 2
#define BPBXSYN_PULSE_WIDTH_WIDTH_RANGE 50
#define BPBXSYN_PULSE_WIDTH_WIDTH_MIN 1
#define BPBXSYN_PULSE_WIDTH_WIDTH_MAX BPBXSYN_PULSE_WIDTH_WIDTH_RANGE

typedef enum {
    BPBXSYN_PULSE_WIDTH_PARAM_WIDTH = BPBXSYN_BASE_PARAM_COUNT,
    BPBXSYN_PULSE_WIDTH_ALIASES
} bpbxsyn_pulse_width_param_e;

////////////////////
// Harmonics data //
////////////////////
#define BPBXSYN_HARMONICS_CONTROL_COUNT 28
#define BPBXSYN_HARMONICS_CONTROL_RANGE 8
#define BPBXSYN_HARMONICS_CONTROL_MAX ((BPBXSYN_HARMONICS_CONTROL_RANGE - 1))
#define BPBXSYN_HARMONICS_PARAM_COUNT ((1 + BPBXSYN_HARMONICS_CONTROL_COUNT))

typedef enum {
    BPBXSYN_HARMONICS_PARAM_UNISON = BPBXSYN_BASE_PARAM_COUNT,
    BPBXSYN_HARMONICS_PARAM_CONTROL_FIRST,
    BPBXSYN_HARMONICS_PARAM_CONTROL_LAST =
        BPBXSYN_HARMONICS_PARAM_CONTROL_FIRST +
        (BPBXSYN_HARMONICS_CONTROL_COUNT - 1)
} bpbxsyn_harmonics_param_e;

///////////////////
// Spectrum data //
///////////////////
#define BPBXSYN_SPECTRUM_CONTROL_COUNT 30
#define BPBXSYN_SPECTRUM_CONTROL_RANGE 8
#define BPBXSYN_SPECTRUM_CONTROL_MAX ((BPBXSYN_SPECTRUM_CONTROL_RANGE - 1))
#define BPBXSYN_SPECTRUM_PARAM_COUNT ((BPBXSYN_SPECTRUM_CONTROL_COUNT + 1))

typedef enum {
    BPBXSYN_SPECTRUM_PARAN_IS_NOISE_CHANNEL = BPBXSYN_BASE_PARAM_COUNT,
    BPBXSYN_SPECTRUM_PARAM_CONTROL_FIRST,
    BPBXSYN_SPECTRUM_PARAM_CONTROL_LAST =
        BPBXSYN_SPECTRUM_PARAM_CONTROL_FIRST +
        (BPBXSYN_SPECTRUM_CONTROL_COUNT - 1)
} bpbxsyn_spectrum_param_e;

////////////////////////
// Volume effect data //
////////////////////////
#define BPBXSYN_VOLUME_PARAM_COUNT 1
#define BPBXSYN_INSTRUMENT_VOLUME_MIN -25.0
#define BPBXSYN_INSTRUMENT_VOLUME_MAX 25.0

typedef enum {
    BPBXSYN_VOLUME_PARAM_VOLUME
} bpbxsyn_volume_param_e;

/////////////////////////
// Panning effect data //
/////////////////////////
#define BPBXSYN_PANNING_PARAM_COUNT 2
#define BPBXSYN_PAN_VALUE_CENTER 50
#define BPBXSYN_PAN_VALUE_MAX ((BPBXSYN_PAN_VALUE_CENTER * 2))
#define BPBXSYN_PAN_DELAY_MAX 20

typedef enum {
    BPBXSYN_PANNING_PARAM_PAN,
    BPBXSYN_PANNING_PARAM_PAN_DELAY,
} bpbxsyn_panning_param_e;

////////////////////////////
// Distortion effect data //
////////////////////////////
#define BPBXSYN_DISTORTION_PARAM_COUNT 1
#define BPBXSYN_DISTORTION_RANGE 8
#define BPBXSYN_DISTORTION_MAX (BPBXSYN_DISTORTION_RANGE - 1)

typedef enum {
    BPBXSYN_DISTORTION_PARAM_POWER
} bpbxsyn_distortion_param_e;

////////////////////////////
// Bitcrusher effect data //
////////////////////////////
#define BPBXSYN_BITCRUSHER_PARAM_COUNT 2
#define BPBXSYN_BITCRUSHER_FREQ_RANGE 14
#define BPBXSYN_BITCRUSHER_QUANTIZATION_RANGE 8
#define BPBXSYN_BITCRUSHER_FREQ_MAX (BPBXSYN_BITCRUSHER_FREQ_RANGE - 1)
#define BPBXSYN_BITCRUSHER_QUANTIZATION_MAX (BPBXSYN_BITCRUSHER_QUANTIZATION_RANGE - 1)

typedef enum {
    BPBXSYN_BITCRUSHER_PARAM_BIT_QUANTIZATION,
    BPBXSYN_BITCRUSHER_PARAM_FREQ_QUANTIZATION,
} bpbxsyn_bitcrusher_param_e;

////////////////////
// EQ effect data //
////////////////////
#define BPBXSYN_EQ_PARAM_COUNT 24

typedef enum {
    BPBXSYN_PARAM_EQ_TYPE0,
    BPBXSYN_PARAM_EQ_FREQ0,
    BPBXSYN_PARAM_EQ_GAIN0,
    BPBXSYN_PARAM_EQ_TYPE1,
    BPBXSYN_PARAM_EQ_FREQ1,
    BPBXSYN_PARAM_EQ_GAIN1,
    BPBXSYN_PARAM_EQ_TYPE2,
    BPBXSYN_PARAM_EQ_FREQ2,
    BPBXSYN_PARAM_EQ_GAIN2,
    BPBXSYN_PARAM_EQ_TYPE3,
    BPBXSYN_PARAM_EQ_FREQ3,
    BPBXSYN_PARAM_EQ_GAIN3,
    BPBXSYN_PARAM_EQ_TYPE4,
    BPBXSYN_PARAM_EQ_FREQ4,
    BPBXSYN_PARAM_EQ_GAIN4,
    BPBXSYN_PARAM_EQ_TYPE5,
    BPBXSYN_PARAM_EQ_FREQ5,
    BPBXSYN_PARAM_EQ_GAIN5,
    BPBXSYN_PARAM_EQ_TYPE6,
    BPBXSYN_PARAM_EQ_FREQ6,
    BPBXSYN_PARAM_EQ_GAIN6,
    BPBXSYN_PARAM_EQ_TYPE7,
    BPBXSYN_PARAM_EQ_FREQ7,
    BPBXSYN_PARAM_EQ_GAIN7,
} bpbxsyn_eq_param_e;

////////////////////////
// Chorus effect data //
////////////////////////
#define BPBXSYN_CHORUS_PARAM_COUNT 1
#define BPBXSYN_CHORUS_RANGE 8
#define BPBXSYN_CHORUS_MAX (BPBXSYN_CHORUS_RANGE - 1)

typedef enum {
    BPBXSYN_CHORUS_PARAM_CHORUS
} bpbxsyn_chorus_param_e;

//////////////////////
// Echo effect data //
//////////////////////
#define BPBXSYN_ECHO_PARAM_COUNT 2
#define BPBXSYN_ECHO_DELAY_RANGE 24
#define BPBXSYN_ECHO_SUSTAIN_RANGE 8
#define BPBXSYN_ECHO_DELAY_MAX ((BPBXSYN_ECHO_DELAY_RANGE - 1))
#define BPBXSYN_ECHO_SUSTAIN_MAX ((BPBXSYN_ECHO_SUSTAIN_RANGE - 1))

typedef enum {
    BPBXSYN_ECHO_PARAM_SUSTAIN,
    BPBXSYN_ECHO_PARAM_DELAY
} bpbxsyn_echo_param_e;

////////////////////////
// Reverb effect data //
////////////////////////
#define BPBXSYN_REVERB_PARAM_COUNT 1
#define BPBXSYN_REVERB_RANGE 32
#define BPBXSYN_REVERB_MAX (BPBXSYN_REVERB_RANGE - 1)

typedef enum {
    BPBXSYN_REVERB_PARAM_REVERB
} bpbxsyn_reverb_param_e;

/////////////////////////
// Limiter effect data //
/////////////////////////
#define BPBXSYN_LIMITER_PARAM_COUNT 7

#define BPBXSYN_LIMITER_MASTER_GAIN_MIN 0.0
#define BPBXSYN_LIMITER_MASTER_GAIN_MAX 5.0
#define BPBXSYN_LIMITER_MASTER_GAIN_DEFAULT 1.0
#define BPBXSYN_LIMITER_MASTER_GAIN_STEP 0.02

#define BPBXSYN_LIMITER_LIMIT_DECAY_MIN 1.0
#define BPBXSYN_LIMITER_LIMIT_DECAY_MAX 30.0
#define BPBXSYN_LIMITER_LIMIT_DECAY_DEFAULT 4.0
#define BPBXSYN_LIMITER_LIMIT_DECAY_STEP 1.0

#define BPBXSYN_LIMITER_LIMIT_RISE_MIN 2000.0
#define BPBXSYN_LIMITER_LIMIT_RISE_MAX 10000.0
#define BPBXSYN_LIMITER_LIMIT_RISE_DEFAULT 4000.0
#define BPBXSYN_LIMITER_LIMIT_RISE_STEP 250.0

#define BPBXSYN_LIMITER_BOOST_THRESHOLD_MIN 0.0
#define BPBXSYN_LIMITER_BOOST_THRESHOLD_MAX 1.1
#define BPBXSYN_LIMITER_BOOST_THRESHOLD_DEFAULT 1.0
#define BPBXSYN_LIMITER_BOOST_THRESHOLD_STEP 0.05

#define BPBXSYN_LIMITER_BOOST_RATIO_MIN 0.0
#define BPBXSYN_LIMITER_BOOST_RATIO_MAX 20.0
#define BPBXSYN_LIMITER_BOOST_RATIO_DEFAULT 10.0
#define BPBXSYN_LIMITER_BOOST_RATIO_STEP 1.0

#define BPBXSYN_LIMITER_CUTOFF_THRESHOLD_MIN 0.0
#define BPBXSYN_LIMITER_CUTOFF_THRESHOLD_MAX 2.0
#define BPBXSYN_LIMITER_CUTOFF_THRESHOLD_DEFAULT 1.0
#define BPBXSYN_LIMITER_CUTOFF_THRESHOLD_STEP 0.05

#define BPBXSYN_LIMITER_CUTOFF_RATIO_MIN 0.0
#define BPBXSYN_LIMITER_CUTOFF_RATIO_MAX 20.0
#define BPBXSYN_LIMITER_CUTOFF_RATIO_DEFAULT 10.0
#define BPBXSYN_LIMITER_CUTOFF_RATIO_STEP 1.0

typedef enum {
    BPBXSYN_LIMITER_MASTER_GAIN,
    BPBXSYN_LIMITER_LIMIT_DECAY,
    BPBXSYN_LIMITER_LIMIT_RISE,
    BPBXSYN_LIMITER_BOOST_THRESHOLD,
    BPBXSYN_LIMITER_BOOST_RATIO,
    BPBXSYN_LIMITER_CUTOFF_THRESHOLD,
    BPBXSYN_LIMITER_CUTOFF_RATIO,
} bpbxsyn_limiter_param_e;

#endif